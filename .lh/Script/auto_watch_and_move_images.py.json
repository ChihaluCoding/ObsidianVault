{
    "sourceFile": "Script/auto_watch_and_move_images.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1760278225253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760278858033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +0,0 @@\n-#!/usr/bin/env python3\r\n-import time\r\n-import shutil\r\n-from pathlib import Path\r\n-from watchdog.observers import Observer\r\n-from watchdog.events import FileSystemEventHandler\r\n-\r\n-class ImageMoveHandler(FileSystemEventHandler):\r\n-    def __init__(self, root_dir, img_dir):\r\n-        self.root_dir = root_dir\r\n-        self.img_dir = img_dir\r\n-\r\n-    def on_created(self, event):\r\n-        if event.is_directory:\r\n-            return\r\n-\r\n-        file_path = Path(event.src_path)\r\n-        if file_path.suffix.lower() in {\".png\", \".jpg\", \".jpeg\", \".gif\", \".bmp\"}:\r\n-            destination = self.img_dir / file_path.name\r\n-            shutil.move(str(file_path), str(destination))\r\n-            print(f\"Moved {file_path} to {destination}\")\r\n-\r\n-\r\n-def main() -> None:\r\n-    root_dir = Path(__file__).resolve().parents[1]\r\n-    img_dir = root_dir / \"img\"\r\n-    img_dir.mkdir(exist_ok=True)\r\n-\r\n-    event_handler = ImageMoveHandler(root_dir, img_dir)\r\n-    observer = Observer()\r\n-    observer.schedule(event_handler, str(root_dir), recursive=False)\r\n-    observer.start()\r\n-\r\n-    print(\"Watching for new image files...\")\r\n-    try:\r\n-        while True:\r\n-            time.sleep(1)\r\n-    except KeyboardInterrupt:\r\n-        observer.stop()\r\n-    observer.join()\r\n-\r\n-\r\n-if __name__ == \"__main__\":\r\n-    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760278956542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+#!/usr/bin/env python3\r\n+import time\r\n+import shutil\r\n+from pathlib import Path\r\n+from watchdog.observers import Observer\r\n+from watchdog.events import FileSystemEventHandler\r\n+\r\n+\r\n+class ImageMoveHandler(FileSystemEventHandler):\r\n+    def __init__(self, root_dir: Path, img_dir: Path):\r\n+        self.root_dir = root_dir\r\n+        self.img_dir = img_dir\r\n+        self.img_extensions = {\".png\", \".jpg\", \".jpeg\", \".gif\", \".bmp\", \".webp\", \".svg\"}\r\n+\r\n+    def on_created(self, event):\r\n+        if event.is_directory:\r\n+            return\r\n+        \r\n+        file_path = Path(event.src_path)\r\n+        \r\n+        # ルート直下の画像ファイルかチェック\r\n+        if file_path.parent == self.root_dir and file_path.suffix.lower() in self.img_extensions:\r\n+            destination = self.img_dir / file_path.name\r\n+            try:\r\n+                shutil.move(str(file_path), str(destination))\r\n+                print(f\"Moved {file_path.name} to img/\")\r\n+            except Exception as e:\r\n+                print(f\"Error moving {file_path.name}: {e}\")\r\n+\r\n+\r\n+def main() -> None:\r\n+    root_dir = Path(__file__).resolve().parents[1]\r\n+    img_dir = root_dir / \"img\"\r\n+    img_dir.mkdir(exist_ok=True)\r\n+\r\n+    event_handler = ImageMoveHandler(root_dir, img_dir)\r\n+    observer = Observer()\r\n+    observer.schedule(event_handler, str(root_dir), recursive=False)\r\n+    observer.start()\r\n+\r\n+    print(f\"Watching for images in {root_dir}\")\r\n+    print(\"Press Ctrl+C to stop...\")\r\n+\r\n+    try:\r\n+        while True:\r\n+            time.sleep(1)\r\n+    except KeyboardInterrupt:\r\n+        observer.stop()\r\n+        print(\"\\nStopped watching.\")\r\n+    \r\n+    observer.join()\r\n+\r\n+\r\n+if __name__ == \"__main__\":\r\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760279033280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,41 @@\n #!/usr/bin/env python3\r\n import time\r\n import shutil\r\n from pathlib import Path\r\n-from watchdog.observers import Observer\r\n-from watchdog.events import FileSystemEventHandler\r\n \r\n \r\n-class ImageMoveHandler(FileSystemEventHandler):\r\n-    def __init__(self, root_dir: Path, img_dir: Path):\r\n-        self.root_dir = root_dir\r\n-        self.img_dir = img_dir\r\n-        self.img_extensions = {\".png\", \".jpg\", \".jpeg\", \".gif\", \".bmp\", \".webp\", \".svg\"}\r\n-\r\n-    def on_created(self, event):\r\n-        if event.is_directory:\r\n-            return\r\n-        \r\n-        file_path = Path(event.src_path)\r\n-        \r\n-        # ルート直下の画像ファイルかチェック\r\n-        if file_path.parent == self.root_dir and file_path.suffix.lower() in self.img_extensions:\r\n-            destination = self.img_dir / file_path.name\r\n-            try:\r\n-                shutil.move(str(file_path), str(destination))\r\n-                print(f\"Moved {file_path.name} to img/\")\r\n-            except Exception as e:\r\n-                print(f\"Error moving {file_path.name}: {e}\")\r\n-\r\n-\r\n def main() -> None:\r\n     root_dir = Path(__file__).resolve().parents[1]\r\n     img_dir = root_dir / \"img\"\r\n     img_dir.mkdir(exist_ok=True)\r\n+    \r\n+    img_extensions = {\".png\", \".jpg\", \".jpeg\", \".gif\", \".bmp\", \".webp\", \".svg\"}\r\n+    processed_files = set()\r\n \r\n-    event_handler = ImageMoveHandler(root_dir, img_dir)\r\n-    observer = Observer()\r\n-    observer.schedule(event_handler, str(root_dir), recursive=False)\r\n-    observer.start()\r\n-\r\n     print(f\"Watching for images in {root_dir}\")\r\n     print(\"Press Ctrl+C to stop...\")\r\n \r\n     try:\r\n         while True:\r\n-            time.sleep(1)\r\n+            for file in root_dir.iterdir():\r\n+                # ルート直下の画像ファイルをチェック\r\n+                if (file.is_file() and \r\n+                    file.suffix.lower() in img_extensions and \r\n+                    file not in processed_files):\r\n+                    \r\n+                    destination = img_dir / file.name\r\n+                    try:\r\n+                        shutil.move(str(file), str(destination))\r\n+                        print(f\"Moved {file.name} to img/\")\r\n+                        processed_files.add(file)\r\n+                    except Exception as e:\r\n+                        print(f\"Error moving {file.name}: {e}\")\r\n+            \r\n+            time.sleep(2)  # 2秒ごとにチェック\r\n+            \r\n     except KeyboardInterrupt:\r\n-        observer.stop()\r\n         print(\"\\nStopped watching.\")\r\n-    \r\n-    observer.join()\r\n \r\n \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1760279543744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,73 @@\n #!/usr/bin/env python3\r\n import time\r\n import shutil\r\n+import sys\r\n+import logging\r\n from pathlib import Path\r\n+from datetime import datetime\r\n \r\n \r\n+def setup_logging(log_dir: Path) -> None:\r\n+    \"\"\"ログ設定を初期化\"\"\"\r\n+    log_file = log_dir / f\"image_watcher_{datetime.now().strftime('%Y%m%d')}.log\"\r\n+    logging.basicConfig(\r\n+        level=logging.INFO,\r\n+        format='%(asctime)s - %(levelname)s - %(message)s',\r\n+        handlers=[\r\n+            logging.FileHandler(log_file, encoding='utf-8'),\r\n+            logging.StreamHandler(sys.stdout)\r\n+        ]\r\n+    )\r\n+\r\n+\r\n def main() -> None:\r\n-    root_dir = Path(__file__).resolve().parents[1]\r\n-    img_dir = root_dir / \"img\"\r\n-    img_dir.mkdir(exist_ok=True)\r\n-    \r\n-    img_extensions = {\".png\", \".jpg\", \".jpeg\", \".gif\", \".bmp\", \".webp\", \".svg\"}\r\n-    processed_files = set()\r\n+    try:\r\n+        root_dir = Path(__file__).resolve().parents[1]\r\n+        log_dir = root_dir / \"Script\" / \"logs\"\r\n+        log_dir.mkdir(exist_ok=True)\r\n+        \r\n+        setup_logging(log_dir)\r\n+        logging.info(\"Image Watcher Service Started\")\r\n+        logging.info(f\"Root directory: {root_dir}\")\r\n+        \r\n+        img_dir = root_dir / \"img\"\r\n+        img_dir.mkdir(exist_ok=True)\r\n+        logging.info(f\"Image directory: {img_dir}\")\r\n+        \r\n+        img_extensions = {\".png\", \".jpg\", \".jpeg\", \".gif\", \".bmp\", \".webp\", \".svg\"}\r\n+        processed_files = set()\r\n \r\n-    print(f\"Watching for images in {root_dir}\")\r\n-    print(\"Press Ctrl+C to stop...\")\r\n+        logging.info(f\"Watching for images in {root_dir}\")\r\n+        logging.info(\"Service is running. Press Ctrl+C to stop...\")\r\n \r\n-    try:\r\n         while True:\r\n-            for file in root_dir.iterdir():\r\n-                # ルート直下の画像ファイルをチェック\r\n-                if (file.is_file() and \r\n-                    file.suffix.lower() in img_extensions and \r\n-                    file not in processed_files):\r\n-                    \r\n-                    destination = img_dir / file.name\r\n-                    try:\r\n-                        shutil.move(str(file), str(destination))\r\n-                        print(f\"Moved {file.name} to img/\")\r\n-                        processed_files.add(file)\r\n-                    except Exception as e:\r\n-                        print(f\"Error moving {file.name}: {e}\")\r\n-            \r\n-            time.sleep(2)  # 2秒ごとにチェック\r\n-            \r\n+            try:\r\n+                for file in root_dir.iterdir():\r\n+                    # ルート直下の画像ファイルをチェック\r\n+                    if (file.is_file() and \r\n+                        file.suffix.lower() in img_extensions and \r\n+                        file not in processed_files):\r\n+                        \r\n+                        destination = img_dir / file.name\r\n+                        try:\r\n+                            shutil.move(str(file), str(destination))\r\n+                            logging.info(f\"Moved {file.name} to img/\")\r\n+                            processed_files.add(file)\r\n+                        except Exception as e:\r\n+                            logging.error(f\"Error moving {file.name}: {e}\")\r\n+                \r\n+                time.sleep(2)  # 2秒ごとにチェック\r\n+                \r\n+            except Exception as e:\r\n+                logging.error(f\"Error in main loop: {e}\")\r\n+                time.sleep(5)\r\n+                \r\n     except KeyboardInterrupt:\r\n-        print(\"\\nStopped watching.\")\r\n+        logging.info(\"Stopped watching (KeyboardInterrupt)\")\r\n+    except Exception as e:\r\n+        logging.error(f\"Fatal error: {e}\", exc_info=True)\r\n+        sys.exit(1)\r\n \r\n \r\n if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                }
            ],
            "date": 1760278225253,
            "name": "Commit-0",
            "content": "#!/usr/bin/env python3\r\nimport time\r\nimport shutil\r\nfrom pathlib import Path\r\nfrom watchdog.observers import Observer\r\nfrom watchdog.events import FileSystemEventHandler\r\n\r\nclass ImageMoveHandler(FileSystemEventHandler):\r\n    def __init__(self, root_dir, img_dir):\r\n        self.root_dir = root_dir\r\n        self.img_dir = img_dir\r\n\r\n    def on_created(self, event):\r\n        if event.is_directory:\r\n            return\r\n\r\n        file_path = Path(event.src_path)\r\n        if file_path.suffix.lower() in {\".png\", \".jpg\", \".jpeg\", \".gif\", \".bmp\"}:\r\n            destination = self.img_dir / file_path.name\r\n            shutil.move(str(file_path), str(destination))\r\n            print(f\"Moved {file_path} to {destination}\")\r\n\r\n\r\ndef main() -> None:\r\n    root_dir = Path(__file__).resolve().parents[1]\r\n    img_dir = root_dir / \"img\"\r\n    img_dir.mkdir(exist_ok=True)\r\n\r\n    event_handler = ImageMoveHandler(root_dir, img_dir)\r\n    observer = Observer()\r\n    observer.schedule(event_handler, str(root_dir), recursive=False)\r\n    observer.start()\r\n\r\n    print(\"Watching for new image files...\")\r\n    try:\r\n        while True:\r\n            time.sleep(1)\r\n    except KeyboardInterrupt:\r\n        observer.stop()\r\n    observer.join()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()"
        }
    ]
}